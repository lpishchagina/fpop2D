Rect 
Geom::intersection(Rect 
rect, 
Disk 
disk) 


Description: 


The 
function 
approximates 
the 
area 
of 
intersection 
of 
the 
rectangle 
and 
the 
circle 
with 
orthogonal 
lines. 
Based 
on 
the 
intersection 
points 
of 
these 
lines, 
we 
construct 
a 
rectangle 
with 
a 
minimum 
area, 
which 
contains 
the 
intersection 
area 
of 
the 
rectangle 
and 
the 
circle. 
If 
there 
is 
no 
intersection, 
the 
function 
returns 
a 
rectangle 
whose 
parameters 
correspond 
to 
the 
condition: 


(rectx0 
≥ 
rectx1)jj(recty0 
≥ 
recty1). 


Input 
parameters: 


The 
function 
receives 
two 
parameters: 


‹ 


rect 
is 
the 
rectangle, 
the 
element 
of 
class 
Rect 
with 
characteristics: 


– 
rectx0,recty0 
are 
coordinates 
of 
the 
bottom 
left 
corner; 
– 
rectx1, 
recty1 
are 
coordinates 
of 
the 
top 
right 
corner. 
To 
access 
these 
characteristics 
using 
the 
methods 
get 
rectx0(), 
get 
recty0(), 
get 
rectx1(), 
get 
recty1(), 
implemented 
in 
the 
class 
Rect. 


‹ 


disk 
is 
the 
circle, 
the 
element 
of 
class 
Disk 
with 
characteristics: 


– 
center1, 
center2 
is 
the 
center 
of 
the 
circle; 
– 
radius 
is 
the 
radius 
of 
the 
circle. 
To 
access 
these 
characteristics 
using 
the 
methods 
get 
center1(), 
get 
center2(), 
get 
radius(), 
implemented 
in 
the 
class 
Disk. 


Output 
parameters: 


‹ 


The 
function 
returns 
new 
rectangle 
rect 
approx 
(the 
element 
of 
class 
Rect) 
with 
a 
minimum 
area, 
which 
contains 
the 
intersection 
area 
of 
the 
rectangle 
rect 
and 
the 
circle 
disk. 
The 
rectangle 
is 
formed 
as 
a 
result 
of 
the 
intersection 
of 
orthogonal 
lines 
that 
approximate 
the 
intersection 
area 
of 
the 
rectangle 
and 
the 
circle. 


If 
there 
is 
no 
intersection, 
the 
function 
returns 
a 
rectangle 
rect 
approx 
whose 
parameters 
correspond 
to 
the 
condition: 


(rectx0 
≥ 
rectx1)jj(recty0 
≥ 
recty1). 


Algorithm: 


Preprocessing 
Using 
the 
methods 
get 
rectx0(), 
get 
recty0(), 
get 
rectx1(), 
get 
recty1(), 
implemented 
in 
the 
class 
Rect 
we 
dene 
the 
parameters 
of 
the 
rectangle 
rect: 


x0= 
rect:get 
rectx0(); 
x1= 
rect:get 
rectx1(); 
y0= 
rect:get 
recty0(); 
y1= 
rect:get 
recty1(). 


Using 
the 
methods 
get 
center1(), 
get 
center2(), 
get 
radius(), 
implemented 
in 
the 
class 
Disk 
we 
dene 
the 
parameters 
of 
the 
circle 
disk: 


c1= 
disk:get 
center1(); 
c2= 
disk:get 
center2(); 
r 
= 
disk:get 
radius(). 


Approximation 


We 
need 
to 
consider 
one 
the 
following 
cases: 


1 



‹ 


The 
center 
of 
the 
circle 
is 
inside 
the 
rectangle. 


If 
the 
center 
of 
the 
disk 
inside 
the 
rectangle 
we 
dene 
the 
characteristics 
of 
rectangle 
as: 


x0 
= 
maxfx0;c1 
− 
rg; 


x1 
= 
minfx1;c1+ 
rg; 


y0 
= 
maxfy0;c2 
− 
rg; 


y1 
= 
minfy1;c2+ 
rg. 


‹ 


The 
center 
of 
the 
circle 
is 
outside 
the 
rectangle. 


If 
the 
center 
of 
the 
circle 
is 
outside 
the 
rectangle 
we 
calculate 
the 
values 
of 
the 
discriminants 
dl, 
dr, 
db, 
dt 
of 
quadratic 
equations 
obtained 
from 
the 
systems: 


⎧ 


>(x 
− 
c1)2 
+(y 
− 
c2)2 
= 
r;

⎨ 
2 


x 
= 
x0;

>

:

dl 
=4 
∗ 
(r2 
+(x0 
− 
c1)2). 


⎧ 


>(x 
− 
c1)2 
+(y 
− 
c2)2 
= 
r;

⎨ 
2 


x 
= 
x1;

>

:

dr 
=4 
∗ 
(r2 
+(x1 
− 
c1)2). 


⎧ 


>(x 
− 
c1)2 
+(y 
− 
c2)2 
= 
r;

⎨ 
2 


y 
= 
y0;

>

:

db 
=4 
∗ 
(r2 
+(y0 
− 
c2)2). 


⎧ 


>(x 
− 
c1)2 
+(y 
− 
c2)2 
= 
r;

⎨ 
2 


y 
= 
y1;

>

:

dt 
=4 
∗ 
r2 
+(y1 
− 
c2)2 
. 


If 
all 
values 
of 
the 
discriminants 
dl, 
dr, 
db, 
dt 
are 
non-positive, 
then 
the 
rectangle 
has 
no 
intersections 
with 
the 
circle 
and 
we 
dene 
the 
characteristics 
of 
rectangle 
as: 


x0= 
x1. 


Otherwise, 
we 
need 
to 
consider 
two 
directions 
and 
update 
the 
characteristics 
of 
rectangle: 


– 
horizontal 
direction(the 
characteristics 
y0;y1): 
If 
x0 
≤ 
c1 
≤ 
x1 
then 
y0 
= 
maxfy0;c2 
− 
rg; 
y1 
= 
minfy1;c2+ 
rg. 


Otherwise, 
we 
need 
to 
consider 
the 
points 
of 
intersection 
of 
the 
circle 
with 
straight 
lines 
x 
= 
x0andx 
= 
x1. 
The 
circle 
has 
2 
intersection 
points 
with 
a 
straight 
line 
if 
the 
discriminant 
is 
positive. 
Note: 
we 
dene 
the 
default 
intersection 
points 
for 
the 
algorithm 
to 
work 
correctly 
as: 


l1= 
r1= 
1, 
l2= 
r2= 
􀀀1. 


We 
check 
the 
discriminants 
dl, 
dr 
and 
nd 
the 
intersection 
points: 


⎧ 
>dl 
> 
0;

⎨ 


√ 
l1= 
c2 
− 
dl;

⎪ 
p

:

l2= 
c2+ 
dl. 


⎧ 
>dr 
> 
0;

⎨ 


√ 
r1= 
c2 
− 
dr;

⎪ 
p

⎩ 


r2= 
c2+ 
dr. 


We 
dene 
the 
characteristics 
of 
rectangle 
as: 


2 



y0 
= 
maxfy0, 
minfl1;r1gg; 
y1 
= 
minfy1, 
maxfl2;r2gg. 


– 
vertical 
direction 
(the 
characteristics 
x0;x1) 
If 
y0 
≤ 
c2 
≤ 
y1 
then 
x0 
= 
maxfx0;c1 
− 
rg; 
x1 
= 
minfx1;c1+ 
rg. 


Otherwise, 
we 
need 
to 
consider 
the 
points 
of 
intersection 
of 
the 
circle 
with 
straight 
lines 
y 
= 
y0andy 
= 
y1. 
The 
circle 
has 
2 
intersection 
points 
with 
a 
straight 
line 
if 
the 
discriminant 
is 
positive. 
Note: 
we 
dene 
the 
default 
intersection 
points 
for 
the 
algorithm 
to 
work 
correctly 
as: 


b1= 
t1= 
1, 
b2= 
t2= 
􀀀1. 


We 
check 
the 
discriminants 
db, 
dt 
and 
nd 
the 
intersection 
points: 


⎧ 
>db 
> 
0;

⎨ 


√ 
b1= 
c1 
− 
db;

⎪ 
p

:

b2= 
c1+ 
db. 


⎧ 
>dt 
> 
0;

⎨ 


√ 
t1= 
c1 
− 
dt;

⎪ 
p

⎩ 


t2= 
c1+ 
dt. 


We 
dene 
the 
characteristics 
of 
rectangle 
as: 


x0 
= 
maxfx0, 
minfb1;t1gg; 
x1 
= 
minfx1, 
maxfb2;b2gg. 


Output 
When 
we 
have 
updated 
all 
the 
characteristics, 
we 
form 
the 
required 
rectangle 
rect 
approx. 


bool 
Geom::empty 
set(Rect 
rect) 


Description: 


The 
function 
checks 
the 
parameters 
of 
the 
rectangle. 
If 
the 
parameters 
are 
not 
correct, 
this 
rectangle 
is 
empty. 


Input 
parameters: 


‹ 


rect 
is 
the 
rectangle, 
the 
element 
of 
class 
Rect 
with 
characteristics: 


– 
rectx0,recty0 
are 
coordinates 
of 
the 
bottom 
left 
corner; 
– 
rectx1, 
recty1 
are 
coordinates 
of 
the 
top 
right 
corner. 
To 
access 
these 
characteristics 
using 
the 
methods 
get 
rectx0(), 
get 
recty0(), 
get 
rectx1(), 
get 
recty1(), 
implemente
d 
in 
the 
class 
Rect.checks 
the 
parameters 
of 
the 
rectangle. 
Output 
parameters: 
The 
function 
returns 
a 
boolean 
value 
true 
if 
the 
rectangle 
is 
empty, 
else 
false. 
Algorithm: 


If 
parameters 
of 
the 
rectangle 
do 
not 
correspond 
to 
the 
condition: 


(rectx0 
> 
rectx1)&&(recty0 
> 
recty1); 


this 
rectangle 
is 
empty 
and 
the 
function 
returns 
a 
boolean 
value 
true, 
else 
false. 


3 



